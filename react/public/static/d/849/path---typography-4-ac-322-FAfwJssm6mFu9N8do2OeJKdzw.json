{"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"typography","title":"Typography","description":"Typography means the style and size of text.                            Type settings here should be used in the                            construction of components not defined in                            Spark. See each setting for intended use.","restrictions":null,"information":["The heading elements are set automatically   and don't require you to add classes.","The body copy will automatically get style   and size from Spark, but in order to get the   line height collision fix, you'll need to   apply a setting class."],"sprkComponent":null,"sourceCode":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar information = ['The heading elements are set automatically \\\n  and don\\'t require you to add classes.', 'The body copy will automatically get style \\\n  and size from Spark, but in order to get the \\\n  line height collision fix, you\\'ll need to \\\n  apply a setting class.'];\nvar description = 'Typography means the style and size of text. \\\n                           Type settings here should be used in the \\\n                           construction of components not defined in \\\n                           Spark. See each setting for intended use.';\nvar variants = [{\n  name: 'Page Title',\n  description: 'The page title is used on primary pages \\\n                  that contain multiple jumping off points, \\\n                  as well as core product features and flows.\\\n                  It should only be used once at the top \\\n                  of the main content of a page.',\n  // This would be storybookDocs <Story id=\"\"> component\n  component: 'foo',\n  sourceCode: '<div>foo</div>'\n}, {\n  name: 'Display One',\n  description: 'This display size is intended to be used for primary headings.',\n  component: 'foo',\n  sourceCode: '<div>foo</div>'\n}, {\n  name: 'Display Two',\n  description: 'This display size is intended to be used for secondary headings.',\n  component: 'foo',\n  sourceCode: '<div>foo</div>'\n}];\nvar _frontmatter = {\n  \"title\": \"Typography\",\n  \"path\": \"typography\",\n  \"type\": \"fundamental\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  information: information,\n  description: description,\n  variants: variants,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Extra Heading\"), mdx(\"p\", null, \"Extra content added in MDX File\"));\n}\nMDXContent.isMDXComponent = true;","variants":[{"description":"The page title is used on primary pages                   that contain multiple jumping off points,                   as well as core product features and flows.                  It should only be used once at the top                   of the main content of a page.","name":"Page Title","sprkComponent":null,"sourceCode":"<div>foo</div>"},{"description":"This display size is intended to be used for primary headings.","name":"Display One","sprkComponent":null,"sourceCode":"<div>foo</div>"},{"description":"This display size is intended to be used for secondary headings.","name":"Display Two","sprkComponent":null,"sourceCode":"<div>foo</div>"}]}}