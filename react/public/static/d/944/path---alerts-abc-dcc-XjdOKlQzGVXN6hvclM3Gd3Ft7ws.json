{"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"alerts","title":"Alerts","description":"An Alert is a way to notify                             users without interrupting their                             actions. Alerts are to appear at the                             top of the page. They consist of an                             icon (in either a success, info, or                             error state), an area for text, and                             an optional dismiss button.","restrictions":["Should fill the width of the viewport.","The content should be kept short and concise.","role=\"alert\" is required so that assistive   technology can inform users their attention is needed.","The data-id property is provided as a hook for   automated tools. If you have multiple instances   of the same variant of a component on the same page,  make sure each instance has a unique data-id   property (\"alert-info-1\", \"alert-info-2\", \"alert-info-3\", etc)."],"information":["May have timed visibility (10 seconds) and/or be   dismissed by the user by clicking the \"x\" icon.","If the content wraps to a new line the icon on   the left should remain vertically centered, but   the dismiss icon should remain in place at the top right."],"sprkComponent":"components-alert--default","sourceCode":"<SprkAlert>This will be the source code for the default alert</SprkAlert>","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar sprkComponent = 'components-alert--default';\nvar sourceCode = '<SprkAlert>This will be the source code for the default alert</SprkAlert>';\nvar information = ['May have timed visibility (10 seconds) and/or be \\\n  dismissed by the user by clicking the \"x\" icon.', 'If the content wraps to a new line the icon on \\\n  the left should remain vertically centered, but \\\n  the dismiss icon should remain in place at the top right.'];\nvar restrictions = ['Should fill the width of the viewport.', 'The content should be kept short and concise.', 'role=\"alert\" is required so that assistive \\\n  technology can inform users their attention is needed.', 'The data-id property is provided as a hook for \\\n  automated tools. If you have multiple instances \\\n  of the same variant of a component on the same page,\\\n  make sure each instance has a unique data-id \\\n  property (\"alert-info-1\", \"alert-info-2\", \"alert-info-3\", etc).'];\nvar description = 'An Alert is a way to notify \\\n                            users without interrupting their \\\n                            actions. Alerts are to appear at the \\\n                            top of the page. They consist of an \\\n                            icon (in either a success, info, or \\\n                            error state), an area for text, and \\\n                            an optional dismiss button.';\nvar variants = [{\n  name: 'Information',\n  description: 'Shows information that is important for a client to read. \\\n                  Information Alerts have a Bell icon.',\n  // This would be the ID for storybookDocs <Story id=\"\"> component\n  sprkComponent: 'components-alert--information',\n  sourceCode: '<div>foo</div>'\n}, {\n  name: 'Success',\n  description: 'These provide positive feedback to \\\n                  a user\\'s action. Success Alerts have a checkmark icon.',\n  sprkComponent: 'foo',\n  sourceCode: '<div>foo</div>'\n}, {\n  name: 'Fail',\n  description: 'These provide negative feedback to a \\\n                  user\\'s action. Fail Alerts have an exclamation mark icon.',\n  sprkComponent: 'foo',\n  sourceCode: '<div>foo</div>'\n}, {\n  name: 'Alert Without A Dismiss Button',\n  description: 'Alerts can be used without the dismiss button. \\\n                  Here is a Success Alert that is not able to be dismissed.',\n  sprkComponent: 'foo',\n  sourceCode: '<div>foo</div>'\n}];\nvar _frontmatter = {\n  \"title\": \"Alerts\",\n  \"path\": \"alerts\",\n  \"type\": \"component\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  sprkComponent: sprkComponent,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Extra Heading\"), mdx(\"p\", null, \"Extra content added in MDX File\"));\n}\nMDXContent.isMDXComponent = true;","variants":[{"description":"Shows information that is important for a client to read.                   Information Alerts have a Bell icon.","name":"Information","sprkComponent":"components-alert--information","sourceCode":"<div>foo</div>"},{"description":"These provide positive feedback to                   a user's action. Success Alerts have a checkmark icon.","name":"Success","sprkComponent":"foo","sourceCode":"<div>foo</div>"},{"description":"These provide negative feedback to a                   user's action. Fail Alerts have an exclamation mark icon.","name":"Fail","sprkComponent":"foo","sourceCode":"<div>foo</div>"},{"description":"Alerts can be used without the dismiss button.                   Here is a Success Alert that is not able to be dismissed.","name":"Alert Without A Dismiss Button","sprkComponent":"foo","sourceCode":"<div>foo</div>"}]}}