{"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"links","title":"Links","description":"Text links should take the user to                             a new place or change the view the                             user is on. Links use the medium                             blue brand color for their idle                             and hover states while using the                             dark blue brand color for the visited state.","restrictions":["Do not use Spark Link classes on links that    solely have images in them.","Link text should be as meaningful as possible    so users can understand what the purpose of the link is.","The data-id property is provided as a hook for    automated tools. If you have multiple instances    of the same variant of a component on the same    page, make sure each instance has a unique    data-id property (\"link-1\", \"link-2\", \"link-3\", etc)."],"information":null,"sprkComponent":"This will be a rendered link from Storybook","sourceCode":"<SprkLink>This will be the source code for the default link</SprkLink>","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar sprkComponent = 'This will be a rendered link from Storybook';\nvar sourceCode = '<SprkLink>This will be the source code for the default link</SprkLink>';\nvar restrictions = ['Do not use Spark Link classes on links that \\\n   solely have images in them.', 'Link text should be as meaningful as possible \\\n   so users can understand what the purpose of the link is.', 'The data-id property is provided as a hook for \\\n   automated tools. If you have multiple instances \\\n   of the same variant of a component on the same \\\n   page, make sure each instance has a unique \\\n   data-id property (\"link-1\", \"link-2\", \"link-3\", etc).'];\nvar description = 'Text links should take the user to \\\n                            a new place or change the view the \\\n                            user is on. Links use the medium \\\n                            blue brand color for their idle \\\n                            and hover states while using the \\\n                            dark blue brand color for the visited state.';\nvar variants = [{\n  name: 'Simple',\n  description: 'These are generally used when they are not part of a body \\\n                  of text. For example, a list of secondary navigation links in the \\\n                  footer or a cancel action next to a submit button.',\n  // This would be storybookDocs <Story id=\"\"> component\n  sprkComponent: 'foo',\n  sourceCode: '<div>foo</div>'\n}, {\n  name: 'Icon With Text',\n  description: 'This is the link and icon style to use when \\\n                  there is an icon with description text. You may change \\\n                  the size of the icon by adjusting the icon modifier \\\n                  class that is on the svg element.',\n  sprkComponent: 'foo',\n  sourceCode: '<div>foo</div>'\n}, {\n  name: 'Disabled',\n  description: 'These have a muted color and are not clickable.',\n  sprkComponent: 'foo',\n  sourceCode: '<div>foo</div>'\n}];\nvar _frontmatter = {\n  \"title\": \"Links\",\n  \"path\": \"links\",\n  \"type\": \"component\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  sprkComponent: sprkComponent,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"Extra Heading\"), mdx(\"p\", null, \"Extra content added in MDX File\"), mdx(SprkLink, {\n    href: \"#\",\n    id: \"link-1\",\n    mdxType: \"SprkLink\"\n  }, \"Base Link\"));\n}\nMDXContent.isMDXComponent = true;","variants":[{"description":"These are generally used when they are not part of a body                   of text. For example, a list of secondary navigation links in the                   footer or a cancel action next to a submit button.","name":"Simple","sprkComponent":"foo","sourceCode":"<div>foo</div>"},{"description":"This is the link and icon style to use when                   there is an icon with description text. You may change                   the size of the icon by adjusting the icon modifier                   class that is on the svg element.","name":"Icon With Text","sprkComponent":"foo","sourceCode":"<div>foo</div>"},{"description":"These have a muted color and are not clickable.","name":"Disabled","sprkComponent":"foo","sourceCode":"<div>foo</div>"}]}}