<p class="sprk-u-mbm">
  See below for available customization options:
</p>

<table class="drizzle-c-Table drizzle-c-Table--wide sprk-u-mbm">
  <colgroup>
    <col class="sprk-u-Width-20">
    <col>
  </colgroup>

  <thead>
    <tr>
      <th>Prop</th>
      <th>Type</th>
      <th>Description</th>
    </tr>
  </thead>

  <tbody>
    <tr>
      <td class="sprk-u-FontWeight--bold">globalItems</td>
      <td>object</td>
      <td>
        This object should have a key of heading
        (to be used as the global section heading) and an items array of
        objects. The items array objects should have keys of mediaType, src,
        mediaHref, altText, mediaAddClasses, linkElement, analyticsString and description.
        The value for linkElment can be 'a' for anchor or it can
        be a React router Link.
        These will be used to construct the global items.
        The key of mediaType should be 'image', 'svg' or 'SprkIcon'
        depending on what media is desired for each global item. The key
        of mediaAddClasses is for any additional classes that should be
        applied to the media. For example, this can be
        used to supply overrides for image width.
      </td>
    </tr>

    <tr>
      <td class="sprk-u-FontWeight--bold">linkColumns</td>
      <td>array</td>
      <td>
        This array should contain objects with keys of heading and links.
        The heading will be used as the heading for the column. The links value
        should be an array of objects with the keys of href and text for each link.
        Each link can have a value for linkElement which can be 'a' for anchor or it can
        be a React router Link. Each link item can also have an optional key of analyticsString.
        The value will be used for the data-analytics attribute on the link.
      </td>
    </tr>

    <tr>
      <td class="sprk-u-FontWeight--bold">connectIcons</td>
      <td>object</td>
      <td>
        This object should have a key of heading
        (to be used as the connect section heading) and an icons array of
        objects. The icons array objects should have keys of href, name,
        analyticsString, linkElment, and screenReaderText.
        The value for linkElment can be 'a' for anchor or it can
        be a React router Link.
        These will be used to construct the images.
        The key of screenReaderText is a string used to
        display information of what the icon
        is to screen readers.
      </td>
    </tr>

    <tr>
      <td class="sprk-u-FontWeight--bold">awards</td>
      <td>object</td>
      <td>
        This object should have a key of heading
        (to be used as the award section heading) and an images array of
        objects. The images array objects should have keys of href, src,
        altText, linkElement, and addClasses.
        The value for linkElment can be 'a' for anchor or it can
        be a React router Link.
        These will be used to construct the images.
      </td>
    </tr>

    <tr>
      <td class="sprk-u-FontWeight--bold">additionalIcons</td>
      <td>array</td>
      <td>
        This array should contain objects with keys of name, href,
        addClasses, linkElement, and screenReaderText. The values from each key will be
        used to display a SprkIcon. The key of addClasses is optional and is
        a way to add addtional override classes to the icon. The key of
        screenReaderText is a string used to display information of what the icon
        is to screen readers.
        The value for linkElment can be 'a' for anchor or it can
        be a React router Link.
        Each object inside the array will be a new icon.
      </td>
    </tr>

    <tr>
      <td class="sprk-u-FontWeight--bold">paragraphs</td>
      <td>array</td>
      <td>
        This array should contain objects with a key of text and value of the text
        that should be used for each new paragraph.
      </td>
    </tr>

    <tr>
      <td class="sprk-u-FontWeight--bold">additionalClasses</td>
      <td>string</td>
      <td>
        The value supplied to this will used to add classes to the SprkFooter.
        The string should have space-delimited values.
        For example, you could override the
        background color of the footer by supplying a background color utility CSS class.
      </td>
    </tr>

    <tr>
      <td class="sprk-u-FontWeight--bold">idString</td>
      <td>string</td>
      <td>
        The value supplied to this will be used for the data-id
        attribute for the SprkFooter.
      </td>
    </tr>
  </tbody>
</table>